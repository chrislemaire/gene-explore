package com.clemaire.gexplorer.core.gfa

import java.nio.file.{Files, Path, Paths}

import scala.collection.{AbstractSeq, JavaConverters}

/**
  * A [[List]] of paths generated by the given path to
  * the source GFA-path. The GFA-path generated sibling
  * paths at which header, index, heat-map, etc. files
  * are stored.
  *
  * The [[CachePathList]] allows for iteration over
  * its paths for ease of use. For example one might want
  * to delete all generated additional files, which they
  * might do using a forEach iterator.
  *
  * Note: the collection does not include the originally
  * provided GFA-path, as often we do not need it to iterate
  * over as it has a special function as the source file.
  *
  * @param gfaPath The path to the original source GFA-file
  *                from which cache-files will be generated.
  */
class CachePathList(val gfaPath: Path)
  extends AbstractSeq[Path] {

  /**
    * The application data directory for ctag.
    */
  private val APP_DATA = Paths.get(
    if (System.getProperty("os.name").toLowerCase.contains("win")) {
      System.getenv("AppData") + "/Gene Explore/cache"
    } else {
      System.getProperty("user.home") + "/.gexplore/cache"
    })

  /**
    * Initializes the app-data directory by checking if
    * it exists and, if not, creating it.
    */
  private val _: Unit = if (!APP_DATA.toFile.exists()) {
    Files.createDirectories(APP_DATA)
  }

  /**
    * The name of the GFA file without extension.
    */
  private val gfaName: String = {
    val name = gfaPath.getFileName.toString
    if (name.contains('.')) {
      name.substring(0, name.lastIndexOf('.'))
    } else {
      name
    }
  }

  /**
    * Zeroth-zoom-level file extension.
    */
  private val REFERENCE_EXT = ".ref"

  /**
    * Path to the generated zeroth-zoom-data file.
    */
  val referenceFilePath: Path = APP_DATA.resolve(gfaName + REFERENCE_EXT)

  /**
    * List of paths used as the underlying structure
    * that is used when querying this [[CachePathList]]
    * as a [[List]].
    */
  private val listOfPaths: List[Path] =
    List(referenceFilePath)

  override def length: Int = listOfPaths.length

  override def apply(idx: Int): Path = listOfPaths(idx)

  override def iterator: Iterator[Path] = listOfPaths.iterator
}
